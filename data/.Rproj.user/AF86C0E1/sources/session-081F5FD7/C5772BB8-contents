library(tidyverse)
library(readr)

areas <- read_csv("./config-data/geography/areas.csv")

combined_data <- data.frame(stringsAsFactors=FALSE)
combined_metadata <- data.frame(stringsAsFactors=FALSE)

file_paths <- as.data.frame(list.files("csv-preprocess", pattern="\\.csv$", recursive=TRUE, full.names=TRUE))
colnames(file_paths) <- c("filePath")

file_paths <- file_paths |>
  filter(!grepl("/out", filePath, fixed = TRUE)) |>
  filter(!grepl("_IDS", filePath, fixed = TRUE)) |>
  filter(!grepl("uk-small-area-gross-value-added-estimates", filePath, fixed = TRUE)) |>
  filter(!grepl("population-under-devolution-deal-in-england", filePath, fixed = TRUE)) |>
  filter(!grepl("wellbeing_csvw", filePath, fixed = TRUE)) |>
  filter(!grepl("annual-personal-wellbeing-estimates-long", filePath, fixed = TRUE)) |>
  filter(!grepl("cardiovascular-mortality-considered-preventable-in-persons-aged-under-75-2011-census-population-estimates", filePath, fixed = TRUE))
  
for (row in 1:nrow(file_paths)) {
  
  code <- sub("^.*/", "", str_replace(str_replace(file_paths[row, "filePath"], "csv-preprocess/family-ess-main/", ""),".csv", ""))
  
  indicator_data <- read_csv(file_paths[row, "filePath"], col_types = cols(Period = col_character()))
  
  names(indicator_data) <- tolower(names(indicator_data))
  names(indicator_data)[names(indicator_data) == 'rate'] <- 'value'
  
  indicator_data <- indicator_data |>
    mutate(areacd = case_when(
      areacd == "TLB" ~ "E92000001",
      areacd == "TLC" ~ "E12000001",
      areacd == "TLD" ~ "E12000002",
      areacd == "TLE" ~ "E12000003",
      areacd == "TLF" ~ "E12000004",
      areacd == "TLG" ~ "E12000005",
      areacd == "TLH" ~ "E12000006",
      areacd == "TLI" ~ "E12000007",
      areacd == "TLJ" ~ "E12000008",
      areacd == "TLK" ~ "E12000009",
      areacd == "TLL" ~ "W92000004",
      areacd == "TLM" ~ "S92000003",
      areacd == "TLN" ~ "N92000002",
      TRUE ~ areacd
    ))
  
  indicator_data <- indicator_data %>%
    filter(areacd %in% areas$areacd)
  
  metadata_columns <- c("areacd", "unit", "measure", "polarity", "variable name", "indicator", "mode-of-travel")
  metadata_columns <- metadata_columns[metadata_columns %in% colnames(indicator_data)]
  
  if (code == "gross-median-weekly-pay") {
    
    indicator_data <- indicator_data |>
      mutate(`variable name` = case_when(
        is.na(`variable name`) ~ "Gross median weekly pay",
        TRUE ~ `variable name`
      ))
  }
  
  if (code == "average-travel-time-long") {
    
    indicator_data <- indicator_data |>
      mutate(code = paste0(code,"-", `mode-of-travel`))
    
    indicator_metadata <- indicator_data[, metadata_columns, drop = FALSE] |>
      mutate(areacd = NULL) |>
      mutate(code = paste0(code,"-", `mode-of-travel`)) |>
      mutate(`mode-of-travel` = NULL)
    
  } else if (code == "annual-personal-wellbeing-estimates") {
    
    indicator_data <- indicator_data |>
      mutate(code = paste0(code,"-", measure))
    
    indicator_metadata <- indicator_data[, metadata_columns, drop = FALSE] |>
      mutate(areacd = NULL) |>
      mutate(code = paste0(code,"-", measure))
    
  } else if (code == "employment-rate-long") {
    
    indicator_data <- indicator_data |>
      mutate(code = paste0(code,"-", indicator))
    
    indicator_metadata <- indicator_data[, metadata_columns, drop = FALSE] |>
      mutate(areacd = NULL) |>
      mutate(code = paste0(code,"-", indicator))
  
  }  else {
    
    indicator_data <- indicator_data |>
      mutate(code = code)
    
    indicator_metadata <- indicator_data[, metadata_columns, drop = FALSE] |>
      mutate(areacd = NULL) |>
      mutate(code = code)
  
  }
  
  indicator_data <- indicator_data[c("areacd", "period", "value", "code")]
  combined_data <- rbind(combined_data, indicator_data)
  
  indicator_metadata <- unique(indicator_metadata) 
  combined_metadata <- bind_rows(combined_metadata, indicator_metadata)
}

periods <- as.data.frame(unique(combined_data$period))
colnames(periods) <- "period"

write.csv(periods, "config-data/periods/unique-periods.csv", row.names = FALSE)
periods <- read_csv("config-data/periods/unique-periods-lookup.csv")

write.csv(combined_metadata, "config-data/indicators/indicators.csv", row.names = FALSE)
indicators <- read_csv("config-data/indicators/indicators-lookup.csv")

combined_data <- merge(x = combined_data, y = indicators[c("id", "code")], by="code", all.x = TRUE) |>
  mutate(code = NULL)

combined_data <- merge(x = combined_data, y = periods[c("period", "xDomainNumb")], by = "period", all.x = TRUE) |>
  mutate(period = NULL)

latest_period_data <- data.frame(stringsAsFactors=FALSE)
created_files_log <- data.frame(
              code=double(),
              type=character(),
              stringsAsFactors=FALSE)

combined_data <- combined_data |>
  filter(!is.na(value))

for (row in 1:nrow(indicators)) {
  
  indicator_id <- as.numeric(indicators[row, "id"])

  indicator_data <- combined_data |>
    filter(id == indicator_id) 
  
  list_of_periods <- unique(indicator_data$xDomainNumb)
  
  indicators[row, "minXDomain"] <- min(list_of_periods)
  indicators[row, "maxXDomain"] <- max(list_of_periods)
  
  indicator_latest_period_data <- indicator_data |>
    filter(xDomainNumb == max(list_of_periods))
  
  latest_period_data <- rbind(latest_period_data, indicator_latest_period_data)
  
  if (length(list_of_periods) > 1) {
    
    initial_period_data <- indicator_data |>
      filter(xDomainNumb == min(list_of_periods))
    
    created_files_log <- created_files_log |>
      add_row(id=indicator_id, type="initial")
    
    write.csv(initial_period_data, paste0("./csv/initial-period/indicator-",indicator_id,".csv"), row.names = FALSE)
    
  }
  
  if (length(list_of_periods) > 2) {
    
    other_periods_data <- indicator_data |>
      filter(xDomainNumb != min(list_of_periods)) |>
      filter(xDomainNumb != max(list_of_periods))
    
    created_files_log <- created_files_log |>
      add_row(code=indicator_id, type="other")
    
    write.csv(other_periods_data, paste0("./csv/other-period/indicator-",indicator_id,".csv"), row.names = FALSE)
    
  }
}

write.csv(latest_period_data, "./csv/latest-period/data.csv", row.names = FALSE)
write.csv(created_files_log, "./config-data/datasets-log.csv", row.names = FALSE)











