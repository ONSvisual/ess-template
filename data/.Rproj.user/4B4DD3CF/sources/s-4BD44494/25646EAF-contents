library(tidyverse)
library(jsonlite)
library(stringr)
library(data.table)

csvFileNamesList <- list.files("./csv-preprocess", pattern='csv')

areasLookup <- read_csv("areasLookup.csv") 

writeToJSONFile <- function(dataFrame, filePath, replaceText = FALSE) {
  
  dataList <- split(dataFrame,seq(nrow(dataFrame)))  
  
  outputJSON <- list()
  
  for (row in dataList) {
    
    key <- row[[1]]
    
    valuesList <- list()
    
    for (i in 2:length(row)) {
      
      columnKey <- str_replace(colnames(dataFrame)[i], replaceText, "")
      valuesList[[columnKey]] <- unbox(as.numeric(row[[i]]))
      
    }
    
    outputJSON[[key]] <- valuesList
    
  }
  
  write(toJSON(outputJSON, pretty = TRUE), filePath)
  
}
  

for (file in csvFileNamesList)  {
  
  print(file)
  
  inputDataFrame <- read_csv(paste0("./csv-preprocess/",file))
  
  listOfYears <- as.numeric(unlist(colnames(inputDataFrame)[-1]))
  
  dataRange <- list(min(listOfYears), max(listOfYears))
  
  writeToJSONFile(inputDataFrame, paste0("./json/indicator-raw/all-years/", str_replace(file, ".csv", ""), ".json"), "xyz")
  
  for (year in listOfYears) {
    
    dir.create(paste0("./json/indicator-raw/", year), showWarnings = FALSE)
    
    singleYearDataFrame <- subset(inputDataFrame, select = c("areacd", year))
    
    eval(parse(text=paste0('singleYearJSON <- toJSON(setNames(as.list(singleYearDataFrame$`', year,'`), singleYearDataFrame$areacd),  auto_unbox = TRUE)')))
    
    write(singleYearJSON, paste0("./json/indicator-raw/", year,"/", str_replace(file, ".csv", ""), ".json"))
  
  }
  
  dir.create(paste0("./json/area/", str_replace(file, ".csv", "")), showWarnings = FALSE)

  for (i in seq(nrow(inputDataFrame))) {
    
    write(toJSON(unbox(inputDataFrame[i,])), paste0("./json/area/", str_replace(file, ".csv", ""),"/",inputDataFrame[i, "areacd"],".json"))
    
  }
  
  rankDataFrame <- merge(x = inputDataFrame, y = areasLookup, by = "areacd", all.x = TRUE)
  
  for (geoLevel in colnames(areasLookup)[-1:-2]) {
    
    eval(parse(text=paste0("rankDataFrameFiltered <- filter(rankDataFrame, !is.na(",geoLevel,") && ",geoLevel," != 'N')")))
    
    for (year in listOfYears) {
    
      eval(parse(text=paste0("rankDataFrameFiltered <- rankDataFrameFiltered %>% group_by(",geoLevel,") %>% mutate(rank_",geoLevel,"_",year,"=(",geoLevel,"!='N')*min_rank(`",year,"`))")))
      eval(parse(text=paste0("rankDataFrameFiltered$`",year,"` <- NULL")))
      
    }
    
    rankDataFrameFiltered$areanm <- NULL
    
    for (geoLevelAgain in colnames(areasLookup)[-1:-2]) {
      
      eval(parse(text=paste0("rankDataFrameFiltered$",geoLevelAgain," <- NULL")))
      
    }
    
    if (nrow(rankDataFrameFiltered) > 0) {
    
      writeToJSONFile(rankDataFrameFiltered, paste0("./json/indicator-rank/", geoLevel, "/", str_replace(file, "-.csv", ""), ".json"), paste0("rank_", geoLevel, "_"))
    
    }
    
    dir.create(paste0("./json/rank-area/", str_replace(file, ".csv", "")), showWarnings = FALSE)
    
    if (nrow(rankDataFrameFiltered) > 0) {
    
    for (i in seq(nrow(rankDataFrameFiltered))) {
      
      write(toJSON(unbox(rankDataFrameFiltered[i,])), paste0("./json/rank-area/", str_replace(file, ".csv", ""),"/",rankDataFrame[i, "areacd"],".json"))
      
    }
      
    }
  }
}