library(tidyverse)
library(jsonlite)
library(stringr)
library(data.table)

csvFileNamesList <- list.files("./csv-preprocess", pattern='csv')

areasLookup <- read_csv("./csv/areasLookup.csv") 
areaDataFrame <- areasLookup
valuesDataFrame <- areasLookup

totalValuesDataFrame <- data.frame(category=character(),
                                   count=double(), 
                                   geoLevel=character(),
                                   stringsAsFactors=FALSE)

nullValuesDataFrame <- data.frame(category=character(),
                                  count=double(), 
                                  indicator=character(), 
                                  year=double(),
                                  geoLevel=character(),
                                  stringsAsFactors=FALSE) 


for (geoLevel in c("parentcd", "country", "region", "localauthority", "countrycd")) {
  
  
  eval(parse(text=paste0("countOfValues <- areasLookup %>% group_by(", geoLevel,") %>% summarise(count = n())")))
  
  colnames(countOfValues) <- c("category", "count")
  
  eval(parse(text=paste0("countOfValues <- countOfValues %>% mutate(geoLevel = '", geoLevel, "')")))
  
  totalValuesDataFrame <- rbind(totalValuesDataFrame, countOfValues)
}

totalValuesDataFrame <- totalValuesDataFrame %>%
  filter(!is.na(category))

write.csv(totalValuesDataFrame, paste0("./csv/countOfAreasByGeoLevel.csv"), row.names = FALSE)

for (file in csvFileNamesList)  {
  
  indicator <- str_replace(file, ".csv", "")
  
  inputDataFrame <- read_csv(paste0("./csv-preprocess/",file))
  
  listOfYears <- as.numeric(unlist(colnames(inputDataFrame)[-1]))
  yearRange <- list(min(listOfYears), max(listOfYears))
  
  inputDataFrame <- merge(x = areasLookup["areacd"], y = inputDataFrame, by = "areacd", all.x = TRUE)
  
  flatDataFrame <- inputDataFrame %>%
    pivot_longer(!areacd , names_to = "year", values_to = "value")

  write.csv(flatDataFrame, paste0("./csv/indicator-raw/all-years/", indicator, ".csv"), , row.names = FALSE)
  
  filteredFlatDataFrame <- flatDataFrame %>%
    filter(year == max(listOfYears))
  
  write.csv(filteredFlatDataFrame, paste0("./csv/indicator-raw/latest-year/", indicator, ".csv"), , row.names = FALSE)
  
  filteredFlatDataFrameForDist <- areasLookup[c("areacd", "localauthority")] %>%
    filter(localauthority == "Y") %>%
    mutate(localauthority = NULL)
  
  filteredFlatDataFrameForDist <- merge(x = filteredFlatDataFrameForDist, y = filteredFlatDataFrame, by = "areacd", all.x = TRUE) %>%
    filter(!is.na(value))
  
  maxValue <- ceiling(max(filteredFlatDataFrameForDist$value))
  
  valueRange <- c(0, maxValue*1.02)
  bucketRange <- diff(valueRange)/102
  
  bucketCounts <- rep(0, 102)
  
  for (value in filteredFlatDataFrameForDist$value) {
    
    
    bucketIndex <- ceiling((value - valueRange[1]) / bucketRange)
    bucketCounts[bucketIndex] <- bucketCounts[bucketIndex] + 1
  }
  
  midpoints <- seq(valueRange[1] + bucketRange/2, valueRange[2] - bucketRange/2, by = bucketRange)
  
  midpoints <- c(0, midpoints)
  bucketCounts <- c(0, bucketCounts)
  
  bucketDataFrame <- data.frame(midpoint = midpoints, count = bucketCounts)
  
  write.csv(bucketDataFrame, paste0("./csv/indicator-distribution/latest-year/", indicator, ".csv"), , row.names = FALSE)
  
  inputDataFrame <- merge(x = areasLookup, y = inputDataFrame, by = "areacd", all.x = TRUE)
  
  for (geoLevel in c("parentcd", "country", "region", "localauthority", "countrycd")) {
    
    eval(parse(text=paste0("rankDataFrameFiltered <- filter(inputDataFrame, !is.na(",geoLevel,") & ",geoLevel," != 'N')")))
    
    for (year in listOfYears) {
      
      eval(parse(text=paste0("countOfNULLs <- rankDataFrameFiltered %>% filter(is.na(`", year,"`)) %>% group_by(", geoLevel, ") %>% summarise(count = n())")))
      
      colnames(countOfNULLs) <- c("category", "count")
      
      eval(parse(text=paste0("countOfNULLs <- countOfNULLs %>% mutate(indicator = '", indicator, "') %>% mutate(year ='", year, "') %>% mutate(geoLevel = '", geoLevel, "')")))
      
      nullValuesDataFrame <- rbind(nullValuesDataFrame, countOfNULLs)
      
      eval(parse(text=paste0("rankDataFrameFiltered <- rankDataFrameFiltered %>% group_by(",geoLevel,") %>% mutate(", indicator,"_",geoLevel,"_",year,"=(",geoLevel,"!='N')*min_rank(`",year,"`))")))
      
      eval(parse(text=paste0("rankDataFrameFiltered$`",year,"` <- NULL")))
      
    }
    
    rankDataFrameFiltered <- subset(rankDataFrameFiltered, select = -c(areanm, parentcd, country, region, localauthority, countrycd, similar))
    
    areaDataFrame <- merge(x = areaDataFrame, y = rankDataFrameFiltered, by = "areacd", all.x = TRUE)
    
  }
  
  filteredValuesDataFrame <- inputDataFrame
  
  for (year in listOfYears) {
    
    eval(parse(text=paste0("filteredValuesDataFrame <- filteredValuesDataFrame %>% mutate(", indicator,"_",year,"=`",year,"`)")))
    
    eval(parse(text=paste0("filteredValuesDataFrame$`",year,"` <- NULL")))
    
  }
  
  filteredValuesDataFrame <- subset(filteredValuesDataFrame, select = -c(areanm, parentcd, country, region, localauthority, countrycd, similar, parentnm))
  
  valuesDataFrame <- merge(x = valuesDataFrame, y = filteredValuesDataFrame, by = "areacd", all.x = TRUE)
  

}

nullValuesDataFrame <- nullValuesDataFrame %>%
  filter(!is.na(category))

write.csv(nullValuesDataFrame, paste0("./csv/countOfNullDataByGeoLevel.csv"), row.names = FALSE)

for (i in seq(nrow(areaDataFrame))) {
  
  write(toJSON(unbox(areaDataFrame[i,])), paste0("./json/area-rank/",areaDataFrame[i, "areacd"],".json"))
  
}

for (i in seq(nrow(valuesDataFrame))) {
  
  write(toJSON(unbox(valuesDataFrame[i,])), paste0("./json/area-raw/",areaDataFrame[i, "areacd"],".json"))
  
}


