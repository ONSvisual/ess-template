library(tidyverse)
library(jsonlite)
library(stringr)
library(data.table)
csvFileNamesList <- list.files("./csv-preprocess", pattern='csv')
areasLookup <- read_csv("areasLookup.csv")
writeToJSONFile <- function(dataFrame, filePath, replaceText = FALSE) {
dataList <- split(dataFrame,seq(nrow(dataFrame)))
outputJSON <- list()
for (row in dataList) {
key <- row[[1]]
valuesList <- list()
for (i in 2:length(row)) {
columnKey <- str_replace(colnames(dataFrame)[i], replaceText, "")
valuesList[[columnKey]] <- unbox(as.numeric(row[[i]]))
}
outputJSON[[key]] <- valuesList
}
write(toJSON(outputJSON, pretty = TRUE), filePath)
}
for (file in csvFileNamesList)  {
print(file)
inputDataFrame <- read_csv(paste0("./csv-preprocess/",file))
listOfYears <- as.numeric(unlist(colnames(inputDataFrame)[-1]))
dataRange <- list(min(listOfYears), max(listOfYears))
#writeToJSONFile(inputDataFrame, paste0("./json/indicator-raw/", str_replace(file, ".csv", ""), ".json"), "xyz")
rankDataFrame <- merge(x = inputDataFrame, y = areasLookup, by = "areacd", all.x = TRUE)
for (geoLevel in colnames(areasLookup)[-1:-2]) {
eval(parse(text=paste0("rankDataFrameFiltered <- filter(rankDataFrame, !is.na(",geoLevel,") && ",geoLevel," != 'N')")))
for (year in listOfYears) {
eval(parse(text=paste0("rankDataFrameFiltered <- rankDataFrameFiltered %>% group_by(",geoLevel,") %>% mutate(rank_",geoLevel,"_",year,"=(",geoLevel,"!='N')*min_rank(`",year,"`))")))
eval(parse(text=paste0("rankDataFrameFiltered$`",year,"` <- NULL")))
}
rankDataFrameFiltered$areanm <- NULL
for (geoLevelAgain in colnames(areasLookup)[-1:-2]) {
eval(parse(text=paste0("rankDataFrameFiltered$",geoLevelAgain," <- NULL")))
}
if (nrow(rankDataFrameFiltered) > 0) {
#writeToJSONFile(rankDataFrameFiltered, paste0("./json/indicator-rank/", geoLevel, "/", str_replace(file, "-.csv", ""), ".json"), paste0("rank_", geoLevel, "_"))
}
}
}
View(dataRange)
View(inputDataFrame)
View(inputDataFrame)
View(inputDataFrame)
testDataFrame <- subset(inputDataFrame, select = c(1,2))
View(testDataFrame)
writeToJSONFile(testDataFrame, paste0("./json/indicator-raw/2022/", str_replace(file, ".csv", ""), ".json"), "xyz")
testDataFrame <- toJSON(setNames(as.list(testDataFrame$areacd), testDataFrame$`2012`),  auto_unbox = TRUE)
testDataFrame <- subset(inputDataFrame, select = c(1,2))
#writeToJSONFile(testDataFrame, paste0("./json/indicator-raw/2022/", str_replace(file, ".csv", ""), ".json"), "xyz")
testDataFrame <- write(toJSON(setNames(as.list(testDataFrame$`2012`), testDataFrame$areacd),  auto_unbox = TRUE), paste0("./json/indicator-raw/2022/", str_replace(file, ".csv", ""), ".json"))
testDataFrame <- subset(inputDataFrame, select = c(1,2))
View(testDataFrame)
testDataFrame <- write(toJSON(setNames(as.list(testDataFrame$`2012`), testDataFrame$areacd),  auto_unbox = TRUE), paste0("./json/indicator-raw/2022/", str_replace(file, ".csv", ""), ".json"))
testDataFrame <- subset(inputDataFrame, select = c(1,2))
#writeToJSONFile(testDataFrame, paste0("./json/indicator-raw/2022/", str_replace(file, ".csv", ""), ".json"), "xyz")
write(toJSON(setNames(as.list(testDataFrame$`2012`), testDataFrame$areacd),  auto_unbox = TRUE), paste0("./json/indicator-raw/2022/", str_replace(file, ".csv", ""), ".json"))
View(testDataFrame)
View(inputDataFrame)
x <- toJSON(inputDatFrame)
x <- toJSON(inputDataFrame)
write(x[0], paste0("./json/area/hello.json"))
write(x[1], paste0("./json/area/hello.json"))
write(x[[1]], paste0("./json/area/hello.json"))
write(x[[1]][1], paste0("./json/area/hello.json"))
write(x.[0], paste0("./json/area/hello.json"))
for (i in seq(nrow(x))) {
write(x[i], paste0("./json/area/",i,".json"))
}
x <- toJSON(inputDataFrame)
for (i in seq(nrow(x))) {
print(i)
write(x[i], paste0("./json/area/",i,".json"))
}
x <- inputDataFrame
for (i in seq(nrow(x))) {
print(i)
write(toJSON(x[i,]), paste0("./json/area/",i,".json"))
}
for (i in seq(nrow(x))) {
print(i)
write(unbox(toJSON(x[i,])), paste0("./json/area/",i,".json"))
}
for (i in seq(nrow(x))) {
print(i)
write(unbox(toJSON(x[i,]), auto_unbox = TRUE), paste0("./json/area/",i,".json"))
}
x <- inputDataFrame
for (i in seq(nrow(x))) {
print(i)
write(unbox(toJSON(x[i,]), auto_unbox = TRUE), paste0("./json/area/",i,".json"))
}
x <- inputDataFrame
for (i in seq(nrow(x))) {
print(i)
write(toJSON(x[i,], auto_unbox = TRUE), paste0("./json/area/",i,".json"))
}
View(dataRange)
for (year in listOfYears) {
print(year)
}
View(inputDataFrame)
singleYearDataFrame <- subset(inputDataFrame, select = c("areacd", year))
View(singleYearDataFrame)
write(toJSON(setNames(as.list(singleYearDataFrame$year), singleYearDataFrame$areacd),  auto_unbox = TRUE), paste0("./json/indicator-raw/2022/", str_replace(file, ".csv", ""), ".json"))
print(parse(text=paste0('write(toJSON(setNames(as.list(singleYearDataFrame$`', year,'`), singleYearDataFrame$areacd),  auto_unbox = TRUE), paste0("./json/indicator-raw/",',year, '"/", str_replace(file, ".csv", ""), ".json"))')))
print(parse(text=paste0('write(toJSON(setNames(as.list(singleYearDataFrame$`', year,'`), singleYearDataFrame$areacd),  auto_unbox = TRUE), paste0("./json/indicator-raw/',year, '/, str_replace(file, ".csv", ""), ".json"))')))
print((text=paste0('write(toJSON(setNames(as.list(singleYearDataFrame$`', year,'`), singleYearDataFrame$areacd),  auto_unbox = TRUE), paste0("./json/indicator-raw/',year, '/, str_replace(file, ".csv", ""), ".json"))'))
library(tidyverse)
library(jsonlite)
library(stringr)
library(data.table)
csvFileNamesList <- list.files("./csv-preprocess", pattern='csv')
areasLookup <- read_csv("areasLookup.csv")
writeToJSONFile <- function(dataFrame, filePath, replaceText = FALSE) {
dataList <- split(dataFrame,seq(nrow(dataFrame)))
outputJSON <- list()
for (row in dataList) {
key <- row[[1]]
valuesList <- list()
for (i in 2:length(row)) {
columnKey <- str_replace(colnames(dataFrame)[i], replaceText, "")
valuesList[[columnKey]] <- unbox(as.numeric(row[[i]]))
}
outputJSON[[key]] <- valuesList
}
write(toJSON(outputJSON, pretty = TRUE), filePath)
}
for (file in csvFileNamesList)  {
print(file)
inputDataFrame <- read_csv(paste0("./csv-preprocess/",file))
listOfYears <- as.numeric(unlist(colnames(inputDataFrame)[-1]))
dataRange <- list(min(listOfYears), max(listOfYears))
#writeToJSONFile(inputDataFrame, paste0("./json/indicator-raw/all-years/", str_replace(file, ".csv", ""), ".json"), "xyz")
for (year in listOfYears) {
singleYearDataFrame <- subset(inputDataFrame, select = c("areacd", year))
eval(parse(text=paste0('singleYearJSON <- toJSON(setNames(as.list(singleYearDataFrame$`', year,'`), singleYearDataFrame$areacd),  auto_unbox = TRUE)')))
eval(parse(text=paste0('write(singleYearJSON, paste0("./json/indicator-raw/',year, '/, str_replace(file, ".csv", ""), ".json"))')))
}
rankDataFrame <- merge(x = inputDataFrame, y = areasLookup, by = "areacd", all.x = TRUE)
for (geoLevel in colnames(areasLookup)[-1:-2]) {
eval(parse(text=paste0("rankDataFrameFiltered <- filter(rankDataFrame, !is.na(",geoLevel,") && ",geoLevel," != 'N')")))
for (year in listOfYears) {
eval(parse(text=paste0("rankDataFrameFiltered <- rankDataFrameFiltered %>% group_by(",geoLevel,") %>% mutate(rank_",geoLevel,"_",year,"=(",geoLevel,"!='N')*min_rank(`",year,"`))")))
eval(parse(text=paste0("rankDataFrameFiltered$`",year,"` <- NULL")))
}
rankDataFrameFiltered$areanm <- NULL
for (geoLevelAgain in colnames(areasLookup)[-1:-2]) {
eval(parse(text=paste0("rankDataFrameFiltered$",geoLevelAgain," <- NULL")))
}
if (nrow(rankDataFrameFiltered) > 0) {
#writeToJSONFile(rankDataFrameFiltered, paste0("./json/indicator-rank/", geoLevel, "/", str_replace(file, "-.csv", ""), ".json"), paste0("rank_", geoLevel, "_"))
}
}
}
#
#
# x <- inputDataFrame
#
# for (i in seq(nrow(x))) {
#
#   print(i)
#
#   write(toJSON(x[i,], auto_unbox = TRUE), paste0("./json/area/",i,".json"))
#
# }
write(singleYearJSON, paste0("./json/indicator-raw/", year,"/", str_replace(file, ".csv", ""), ".json"))
dir.create("./json/indicator-raw/2012", showWarnings = FALSE)
library(tidyverse)
library(jsonlite)
library(stringr)
library(data.table)
csvFileNamesList <- list.files("./csv-preprocess", pattern='csv')
areasLookup <- read_csv("areasLookup.csv")
writeToJSONFile <- function(dataFrame, filePath, replaceText = FALSE) {
dataList <- split(dataFrame,seq(nrow(dataFrame)))
outputJSON <- list()
for (row in dataList) {
key <- row[[1]]
valuesList <- list()
for (i in 2:length(row)) {
columnKey <- str_replace(colnames(dataFrame)[i], replaceText, "")
valuesList[[columnKey]] <- unbox(as.numeric(row[[i]]))
}
outputJSON[[key]] <- valuesList
}
write(toJSON(outputJSON, pretty = TRUE), filePath)
}
for (file in csvFileNamesList)  {
print(file)
inputDataFrame <- read_csv(paste0("./csv-preprocess/",file))
listOfYears <- as.numeric(unlist(colnames(inputDataFrame)[-1]))
dataRange <- list(min(listOfYears), max(listOfYears))
#writeToJSONFile(inputDataFrame, paste0("./json/indicator-raw/all-years/", str_replace(file, ".csv", ""), ".json"), "xyz")
for (year in listOfYears) {
dir.create(paste0("./json/indicator-raw/", year), showWarnings = FALSE)
singleYearDataFrame <- subset(inputDataFrame, select = c("areacd", year))
eval(parse(text=paste0('singleYearJSON <- toJSON(setNames(as.list(singleYearDataFrame$`', year,'`), singleYearDataFrame$areacd),  auto_unbox = TRUE)')))
write(singleYearJSON, paste0("./json/indicator-raw/", year,"/", str_replace(file, ".csv", ""), ".json"))
}
rankDataFrame <- merge(x = inputDataFrame, y = areasLookup, by = "areacd", all.x = TRUE)
for (geoLevel in colnames(areasLookup)[-1:-2]) {
eval(parse(text=paste0("rankDataFrameFiltered <- filter(rankDataFrame, !is.na(",geoLevel,") && ",geoLevel," != 'N')")))
for (year in listOfYears) {
eval(parse(text=paste0("rankDataFrameFiltered <- rankDataFrameFiltered %>% group_by(",geoLevel,") %>% mutate(rank_",geoLevel,"_",year,"=(",geoLevel,"!='N')*min_rank(`",year,"`))")))
eval(parse(text=paste0("rankDataFrameFiltered$`",year,"` <- NULL")))
}
rankDataFrameFiltered$areanm <- NULL
for (geoLevelAgain in colnames(areasLookup)[-1:-2]) {
eval(parse(text=paste0("rankDataFrameFiltered$",geoLevelAgain," <- NULL")))
}
if (nrow(rankDataFrameFiltered) > 0) {
#writeToJSONFile(rankDataFrameFiltered, paste0("./json/indicator-rank/", geoLevel, "/", str_replace(file, "-.csv", ""), ".json"), paste0("rank_", geoLevel, "_"))
}
}
}
#
#
# x <- inputDataFrame
#
# for (i in seq(nrow(x))) {
#
#   print(i)
#
#   write(toJSON(x[i,], auto_unbox = TRUE), paste0("./json/area/",i,".json"))
#
# }
write(toJSON(inputDataFrame[i,], auto_unbox = TRUE), paste0("./json/area/",inputDataFrame[i, "areacd"],".json"))
i <- 200
write(toJSON(inputDataFrame[i,], auto_unbox = TRUE), paste0("./json/area/",inputDataFrame[i, "areacd"],".json"))
write(unbox(toJSON(inputDataFrame[i,])), paste0("./json/area/",inputDataFrame[i, "areacd"],".json"))
write(toJSON(unbox(inputDataFrame[i,])), paste0("./json/area/",inputDataFrame[i, "areacd"],".json"))
library(tidyverse)
library(jsonlite)
library(stringr)
library(data.table)
csvFileNamesList <- list.files("./csv-preprocess", pattern='csv')
areasLookup <- read_csv("areasLookup.csv")
writeToJSONFile <- function(dataFrame, filePath, replaceText = FALSE) {
dataList <- split(dataFrame,seq(nrow(dataFrame)))
outputJSON <- list()
for (row in dataList) {
key <- row[[1]]
valuesList <- list()
for (i in 2:length(row)) {
columnKey <- str_replace(colnames(dataFrame)[i], replaceText, "")
valuesList[[columnKey]] <- unbox(as.numeric(row[[i]]))
}
outputJSON[[key]] <- valuesList
}
write(toJSON(outputJSON, pretty = TRUE), filePath)
}
for (file in csvFileNamesList)  {
print(file)
inputDataFrame <- read_csv(paste0("./csv-preprocess/",file))
listOfYears <- as.numeric(unlist(colnames(inputDataFrame)[-1]))
dataRange <- list(min(listOfYears), max(listOfYears))
writeToJSONFile(inputDataFrame, paste0("./json/indicator-raw/all-years/", str_replace(file, ".csv", ""), ".json"), "xyz")
for (year in listOfYears) {
dir.create(paste0("./json/indicator-raw/", year), showWarnings = FALSE)
singleYearDataFrame <- subset(inputDataFrame, select = c("areacd", year))
eval(parse(text=paste0('singleYearJSON <- toJSON(setNames(as.list(singleYearDataFrame$`', year,'`), singleYearDataFrame$areacd),  auto_unbox = TRUE)')))
write(singleYearJSON, paste0("./json/indicator-raw/", year,"/", str_replace(file, ".csv", ""), ".json"))
}
for (i in seq(nrow(inputDataFrame))) {
write(toJSON(unbox(inputDataFrame[i,])), paste0("./json/area/",inputDataFrame[i, "areacd"],".json"))
}
rankDataFrame <- merge(x = inputDataFrame, y = areasLookup, by = "areacd", all.x = TRUE)
for (geoLevel in colnames(areasLookup)[-1:-2]) {
eval(parse(text=paste0("rankDataFrameFiltered <- filter(rankDataFrame, !is.na(",geoLevel,") && ",geoLevel," != 'N')")))
for (year in listOfYears) {
eval(parse(text=paste0("rankDataFrameFiltered <- rankDataFrameFiltered %>% group_by(",geoLevel,") %>% mutate(rank_",geoLevel,"_",year,"=(",geoLevel,"!='N')*min_rank(`",year,"`))")))
eval(parse(text=paste0("rankDataFrameFiltered$`",year,"` <- NULL")))
}
rankDataFrameFiltered$areanm <- NULL
for (geoLevelAgain in colnames(areasLookup)[-1:-2]) {
eval(parse(text=paste0("rankDataFrameFiltered$",geoLevelAgain," <- NULL")))
}
if (nrow(rankDataFrameFiltered) > 0) {
#writeToJSONFile(rankDataFrameFiltered, paste0("./json/indicator-rank/", geoLevel, "/", str_replace(file, "-.csv", ""), ".json"), paste0("rank_", geoLevel, "_"))
}
}
}
library(tidyverse)
library(jsonlite)
library(stringr)
library(data.table)
csvFileNamesList <- list.files("./csv-preprocess", pattern='csv')
areasLookup <- read_csv("areasLookup.csv")
writeToJSONFile <- function(dataFrame, filePath, replaceText = FALSE) {
dataList <- split(dataFrame,seq(nrow(dataFrame)))
outputJSON <- list()
for (row in dataList) {
key <- row[[1]]
valuesList <- list()
for (i in 2:length(row)) {
columnKey <- str_replace(colnames(dataFrame)[i], replaceText, "")
valuesList[[columnKey]] <- unbox(as.numeric(row[[i]]))
}
outputJSON[[key]] <- valuesList
}
write(toJSON(outputJSON, pretty = TRUE), filePath)
}
for (file in csvFileNamesList)  {
print(file)
inputDataFrame <- read_csv(paste0("./csv-preprocess/",file))
listOfYears <- as.numeric(unlist(colnames(inputDataFrame)[-1]))
dataRange <- list(min(listOfYears), max(listOfYears))
writeToJSONFile(inputDataFrame, paste0("./json/indicator-raw/all-years/", str_replace(file, ".csv", ""), ".json"), "xyz")
for (year in listOfYears) {
dir.create(paste0("./json/indicator-raw/", year), showWarnings = FALSE)
singleYearDataFrame <- subset(inputDataFrame, select = c("areacd", year))
eval(parse(text=paste0('singleYearJSON <- toJSON(setNames(as.list(singleYearDataFrame$`', year,'`), singleYearDataFrame$areacd),  auto_unbox = TRUE)')))
write(singleYearJSON, paste0("./json/indicator-raw/", year,"/", str_replace(file, ".csv", ""), ".json"))
}
dir.create(paste0("./json/area/", str_replace(file, ".csv", "")), showWarnings = FALSE)
for (i in seq(nrow(inputDataFrame))) {
write(toJSON(unbox(inputDataFrame[i,])), paste0("./json/area/", str_replace(file, ".csv", ""),"/",inputDataFrame[i, "areacd"],".json"))
}
rankDataFrame <- merge(x = inputDataFrame, y = areasLookup, by = "areacd", all.x = TRUE)
for (geoLevel in colnames(areasLookup)[-1:-2]) {
eval(parse(text=paste0("rankDataFrameFiltered <- filter(rankDataFrame, !is.na(",geoLevel,") && ",geoLevel," != 'N')")))
for (year in listOfYears) {
eval(parse(text=paste0("rankDataFrameFiltered <- rankDataFrameFiltered %>% group_by(",geoLevel,") %>% mutate(rank_",geoLevel,"_",year,"=(",geoLevel,"!='N')*min_rank(`",year,"`))")))
eval(parse(text=paste0("rankDataFrameFiltered$`",year,"` <- NULL")))
}
rankDataFrameFiltered$areanm <- NULL
for (geoLevelAgain in colnames(areasLookup)[-1:-2]) {
eval(parse(text=paste0("rankDataFrameFiltered$",geoLevelAgain," <- NULL")))
}
if (nrow(rankDataFrameFiltered) > 0) {
#writeToJSONFile(rankDataFrameFiltered, paste0("./json/indicator-rank/", geoLevel, "/", str_replace(file, "-.csv", ""), ".json"), paste0("rank_", geoLevel, "_"))
}
}
}
